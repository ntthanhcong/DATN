import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ManageUserScreen extends StatelessWidget {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng t·ª´ Firestore
  void _confirmDeleteUser(
      BuildContext context, String userId, String userName) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('X√°c nh·∫≠n x√≥a'),
          content: Text(
              'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng "$userName" kh·ªèi h·ªá th·ªëng?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // ƒê√≥ng h·ªôp tho·∫°i
              },
              child: const Text('H·ªßy'),
            ),
            TextButton(
              onPressed: () async {
                Navigator.of(context).pop(); // ƒê√≥ng h·ªôp tho·∫°i
                await deleteUser(context, userId, userName);
              },
              child: const Text('X√≥a', style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Qu·∫£n l√Ω ng∆∞·ªùi d√πng')),
      body: StreamBuilder(
        stream: _firestore.collection('users').snapshots(),
        builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (!snapshot.hasData) {
            return Center(child: CircularProgressIndicator());
          }
          final users = snapshot.data!.docs;
          return ListView.builder(
            itemCount: users.length,
            itemBuilder: (context, index) {
              final user = users[index];
              return Card(
                margin: EdgeInsets.symmetric(vertical: 10, horizontal: 15),
                child: ListTile(
                  title: Text(
                      user['username']), // Hi·ªÉn th·ªã username (t√™n ƒëƒÉng nh·∫≠p)
                  subtitle:
                      Text('H·ªç t√™n: ${user['name']}'), // Hi·ªÉn th·ªã name (h·ªç t√™n)
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      // N√∫t ch·ªânh s·ª≠a ng∆∞·ªùi d√πng
                      IconButton(
                        icon: Icon(Icons.edit),
                        onPressed: () {
                          _showEditDialog(context, user.id,
                              user.data() as Map<String, dynamic>);
                        },
                      ),
                      // N√∫t x√≥a ng∆∞·ªùi d√πng
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () {
                          _confirmDeleteUser(context, user.id, user['name']);
                        },
                      ),
                    ],
                  ),
                  onTap: () {
                    _showUserDetailsDialog(
                        context,
                        user.data() as Map<String,
                            dynamic>); // Hi·ªÉn th·ªã chi ti·∫øt ng∆∞·ªùi d√πng
                  },
                ),
              );
            },
          );
        },
      ),
    );
  }

  // H·ªôp tho·∫°i ch·ªânh s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng
  void _showEditDialog(
      BuildContext context, String userId, Map<String, dynamic> userData) {
    final TextEditingController usernameController = TextEditingController(
        text: userData['username']); // T√™n ƒëƒÉng nh·∫≠p (username)
    final TextEditingController phoneController =
        TextEditingController(text: userData['phone']);
    final TextEditingController emailController =
        TextEditingController(text: userData['email']); // Email
    final TextEditingController fullNameController =
        TextEditingController(text: userData['name']); // H·ªç t√™n (name)

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextField(
                    controller: usernameController,
                    decoration: InputDecoration(labelText: 'T√™n ƒëƒÉng nh·∫≠p')),
                TextField(
                    controller: phoneController,
                    decoration: InputDecoration(labelText: 'S·ªë ƒëi·ªán tho·∫°i')),
                TextField(
                    controller: emailController,
                    decoration: InputDecoration(labelText: 'Email')), // Email
                TextField(
                    controller: fullNameController,
                    decoration: InputDecoration(
                        labelText: 'H·ªç v√† t√™n')), // H·ªç t√™n (name)
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('H·ªßy'),
            ),
            TextButton(
              onPressed: () async {
                // C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng v·ªõi th√¥ng tin s·ª≠a ƒë·ªïi
                Map<String, dynamic> updatedData = {
                  'username': usernameController.text, // T√™n ƒëƒÉng nh·∫≠p
                  'phone': phoneController.text,
                  'email': emailController.text, // C·∫≠p nh·∫≠t email
                  'name': fullNameController.text, // C·∫≠p nh·∫≠t h·ªç v√† t√™n (name)
                };
                await updateUser(context, userId, updatedData);
                Navigator.of(context).pop();
              },
              child: Text('L∆∞u'),
            ),
          ],
        );
      },
    );
  }

  // Hi·ªÉn th·ªã chi ti·∫øt ng∆∞·ªùi d√πng
  void _showUserDetailsDialog(
      BuildContext context, Map<String, dynamic> userData) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Chi ti·∫øt ng∆∞·ªùi d√πng'),
          content: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                  "T√™n ƒëƒÉng nh·∫≠p: ${userData['username']}"), // Hi·ªÉn th·ªã username (t√™n ƒëƒÉng nh·∫≠p)
              Text("S·ªë ƒëi·ªán tho·∫°i: ${userData['phone']}"),
              Text("Email: ${userData['email']}"), // Hi·ªÉn th·ªã email
              Text(
                  "H·ªç v√† t√™n: ${userData['name']}"), // Hi·ªÉn th·ªã h·ªç v√† t√™n (name)
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('ƒê√≥ng'),
            ),
          ],
        );
      },
    );
  }

  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng v√†o Firestore
  Future<void> updateUser(BuildContext context, String userId,
      Map<String, dynamic> updatedData) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .update(updatedData);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng')),
      );
    } catch (e) {
      print('L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå L·ªói khi c·∫≠p nh·∫≠t: $e')),
      );
    }
  }

  // X√≥a ng∆∞·ªùi d√πng
  Future<void> deleteUser(
      BuildContext context, String userId, String userName) async {
    try {
      await FirebaseFirestore.instance.collection('users').doc(userId).delete();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('üóëÔ∏è ƒê√£ x√≥a "$userName" kh·ªèi h·ªá th·ªëng'),
        ),
      );
    } catch (e) {
      print('L·ªói x√≥a ng∆∞·ªùi d√πng: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå L·ªói khi x√≥a: $e')),
      );
    }
  }
}
