import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';

class ManageTicketScreen extends StatefulWidget {
  const ManageTicketScreen({super.key});

  @override
  State<ManageTicketScreen> createState() => _ManageTicketScreenState();
}

class _ManageTicketScreenState extends State<ManageTicketScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  DateTime _selectedDate = DateTime.now();

  Future<void> _pickDate() async {
    final picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime(2023),
      lastDate: DateTime(2100),
    );

    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
    }
  }

  void _showDetailsDialog(BuildContext context, Map<String, dynamic> data) {
    final isCargo = data['serviceType'] == 'G·ª≠i h√†ng';
    final travelDate = data['travelDate'];
    final formattedDate = travelDate is Timestamp
        ? DateFormat('dd/MM/yyyy').format(travelDate.toDate())
        : travelDate.toString(); // fallback n·∫øu b·ªã sai ƒë·ªãnh d·∫°ng

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text(isCargo ? "üì¶ Chi ti·∫øt ƒë∆°n h√†ng" : "üé´ Chi ti·∫øt v√© xe"),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(" T√™n ng∆∞·ªùi d√πng: ${data['username']}"),
              Text(" M√£ v√©: ${data['id'] ?? '---'}"),
              Text("Tuy·∫øn: ${data['fromLocation']} ‚Üí ${data['toLocation']}"),
              Text("Ng√†y: $formattedDate"),
              if (isCargo) ...[
                Text("Lo·∫°i h√†ng: ${data['cargoType']}"),
                Text("S·ªë l∆∞·ª£ng: ${data['quantity']} ${data['cargoUnit']}"),
                Text("N∆°i l·∫•y h√†ng: ${data['pickupAddress']}"),
                Text("N∆°i giao h√†ng: ${data['dropoffAddress']}"),
              ] else ...[
                Text("S·ªë gh·∫ø: ${data['selectedSeats']?.join(', ') ?? '---'}"),
                Text(
                    "ƒêi·ªÉm ƒë√≥n: ${data['pickup'] ?? data['fromAddress'] ?? ''}"),
                Text("ƒêi·ªÉm tr·∫£: ${data['dropoff'] ?? data['toAddress'] ?? ''}"),
              ],
              const SizedBox(height: 8),
              Text(
                  "üí∞ T·ªïng ti·ªÅn: ${data['totalPrice']?.toStringAsFixed(0) ?? '0'}ƒë"),
              Text(
                  "‚è±Ô∏è Ng√†y t·∫°o: ${data['createdAt']?.toDate().toString().substring(0, 19) ?? '---'}"),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("ƒê√≥ng"),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final start =
        DateTime(_selectedDate.year, _selectedDate.month, _selectedDate.day);
    final end = start.add(const Duration(days: 1));

    return Scaffold(
      appBar: AppBar(
        title: const Text('Qu·∫£n l√Ω v√© xe'),
        actions: [
          IconButton(
            icon: const Icon(Icons.calendar_today),
            tooltip: 'Ch·ªçn ng√†y',
            onPressed: _pickDate,
          )
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(12),
            child: Text(
              'Ng√†y ƒë∆∞·ª£c ch·ªçn: ${_selectedDate.day}/${_selectedDate.month}/${_selectedDate.year}',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          Expanded(
            child: StreamBuilder(
              stream: _firestore
                  .collection('tickets')
                  .where('travelDate',
                      isGreaterThanOrEqualTo: Timestamp.fromDate(start))
                  .where('travelDate', isLessThan: Timestamp.fromDate(end))
                  .snapshots(),
              builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
                if (!snapshot.hasData) {
                  return const Center(child: CircularProgressIndicator());
                }

                final tickets = snapshot.data!.docs;

                if (tickets.isEmpty) {
                  return const Center(
                      child: Text("Kh√¥ng c√≥ v√© trong ng√†y n√†y."));
                }

                return ListView.builder(
                  itemCount: tickets.length,
                  itemBuilder: (context, index) {
                    final ticket = tickets[index];
                    return Card(
                      margin: const EdgeInsets.symmetric(
                          vertical: 10, horizontal: 15),
                      child: ListTile(
                        title: GestureDetector(
                          onTap: () {
                            _showDetailsDialog(
                                context, ticket.data() as Map<String, dynamic>);
                          },
                          child: Text(
                            ticket['username'],
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.red,
                              decoration: TextDecoration.underline,
                            ),
                          ),
                        ),
                        subtitle:
                            Text('Gh·∫ø ƒë√£ ch·ªçn: ${ticket['selectedSeats']}'),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                              icon: const Icon(Icons.edit),
                              onPressed: () {
                                _showEditDialog(context, ticket.id,
                                    ticket.data() as Map<String, dynamic>);
                              },
                            ),
                            IconButton(
                              icon: const Icon(Icons.delete),
                              onPressed: () {
                                showDialog(
                                  context: context,
                                  builder: (context) => AlertDialog(
                                    title: const Text('X√°c nh·∫≠n x√≥a'),
                                    content: const Text(
                                        'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a v√© n√†y kh√¥ng?'),
                                    actions: [
                                      TextButton(
                                        onPressed: () => Navigator.pop(context),
                                        child: const Text('H·ªßy'),
                                      ),
                                      TextButton(
                                        onPressed: () async {
                                          Navigator.pop(
                                              context); // ƒë√≥ng h·ªôp tho·∫°i x√°c nh·∫≠n
                                          await deleteTicket(ticket.id);
                                        },
                                        child: const Text('X√≥a',
                                            style:
                                                TextStyle(color: Colors.red)),
                                      ),
                                    ],
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  // H·ªôp tho·∫°i ch·ªânh s·ª≠a th√¥ng tin v√©
  void _showEditDialog(
      BuildContext context, String ticketId, Map<String, dynamic> ticketData) {
    final TextEditingController usernameController =
        TextEditingController(text: ticketData['name']);
    final TextEditingController notePhoneController =
        TextEditingController(text: ticketData['phone']);
    final TextEditingController travelDateController = TextEditingController(
        text: (ticketData['travelDate'] as Timestamp)
            .toDate()
            .toString()
            .split(' ')[0]);
    final TextEditingController fromAddressController =
        TextEditingController(text: ticketData['pickup']);
    final TextEditingController toAddressController =
        TextEditingController(text: ticketData['dropoff']);
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Ch·ªânh s·ª≠a v√© xe'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextField(
                  controller: usernameController,
                  decoration: InputDecoration(labelText: 'T√™n h√†nh kh√°ch'),
                ),
                TextField(
                  controller: notePhoneController,
                  decoration: InputDecoration(labelText: 'S·ªë ƒëi·ªán tho·∫°i'),
                ),
                TextField(
                  controller: fromAddressController,
                  decoration: InputDecoration(labelText: 'ƒê·ªãa ch·ªâ ƒëi·ªÉm ƒë√≥n'),
                ),
                TextField(
                  controller: toAddressController,
                  decoration: InputDecoration(labelText: 'ƒê·ªãa ch·ªâ ƒëi·ªÉm ƒë·∫øn'),
                ), // Ghi ch√∫
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('H·ªßy'),
            ),
            TextButton(
              onPressed: () async {
                Map<String, dynamic> updatedData = {
                  'name': usernameController.text,
                  'pickup': fromAddressController.text,
                  'dropoff': toAddressController.text,
                  'phone': notePhoneController.text,
                };

                await updateTicket(ticketId, updatedData);
                Navigator.of(context).pop(); // ƒë√≥ng h·ªôp tho·∫°i

                // üü¢ Hi·ªÉn th·ªã SnackBar th√¥ng b√°o th√†nh c√¥ng
                ScaffoldMessenger.of(this.context).showSnackBar(
                  const SnackBar(
                    content: Text('‚úÖ C·∫≠p nh·∫≠t v√© th√†nh c√¥ng'),
                    backgroundColor: Colors.red,
                  ),
                );
              },
              child: const Text('L∆∞u'),
            ),
          ],
        );
      },
    );
  }

  // C·∫≠p nh·∫≠t v√© xe v√†o Firestore
  Future<void> updateTicket(
      String ticketId, Map<String, dynamic> updatedData) async {
    try {
      await FirebaseFirestore.instance
          .collection('tickets')
          .doc(ticketId)
          .update(updatedData);
    } catch (e) {
      print('L·ªói c·∫≠p nh·∫≠t v√© xe: $e');
    }
  }

  // X√≥a v√© xe
  Future<void> deleteTicket(String ticketId) async {
    try {
      await FirebaseFirestore.instance
          .collection('tickets')
          .doc(ticketId)
          .delete();
    } catch (e) {
      print('L·ªói x√≥a v√© xe: $e');
    }
  }
}
